# Stage 1: Get RKNN source（缓存 RKNN 源码获取）
FROM ubuntu:22.04 AS source

ARG RKNN_VERSION=1.6.0
ENV RKNN_VERSION=${RKNN_VERSION}

# 缓存层1: 安装git（很少变化）
RUN apt update && apt install -y git && \
    rm -rf /var/lib/apt/lists/*

# 缓存层2: 获取RKNN源码（版本变化时重新构建）
RUN git clone --depth 1 -b v${RKNN_VERSION} https://github.com/airockchip/rknn-toolkit2.git /rknn-toolkit2

# Stage 2: Build and install dependencies
FROM ubuntu:22.04 AS builder

ARG DEBIAN_FRONTEND=noninteractive
ARG RKNN_VERSION=1.6.0
ENV RKNN_VERSION=${RKNN_VERSION}

# 缓存层1: 安装系统依赖（很少变化）
RUN apt update -y && apt install -y \
    libxext6 \
    libopencv-dev \
    uvicorn \
    python3-pip \
    git \
    libgdal-dev \
    cmake && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

# 缓存层2: 安装Python构建工具（很少变化）
RUN pip install -U pip setuptools wheel poetry && \
    poetry config virtualenvs.create false

WORKDIR /tmp

# 缓存层3: 复制依赖文件（偶尔变化）
COPY pyproject.toml poetry.lock ./

# 缓存层4: 从source阶段复制RKNN文件（版本变化时重新构建）
COPY --from=source /rknn-toolkit2/rknn_toolkit_lite2/packages/rknn_toolkit_lite2-${RKNN_VERSION}-cp310-cp310-linux_aarch64.whl /tmp/

# 缓存层5: 安装Python依赖（依赖文件变化时重新构建）
RUN poetry install --no-root && \
    pip install /tmp/rknn_toolkit_lite2-${RKNN_VERSION}-cp310-cp310-linux_aarch64.whl

# 缓存层6: 复制源代码（经常变化）
COPY coral_inference /tmp/coral_inference

# 缓存层7: 构建应用（代码变化时重新构建）
RUN poetry build && \
    pip install dist/*.whl

# Stage 3: Runtime
FROM ubuntu:22.04 AS runtime

ARG DEBIAN_FRONTEND=noninteractive
ARG RKNN_VERSION=1.6.0
ENV RKNN_VERSION=${RKNN_VERSION}

# 缓存层1: 安装运行时系统依赖（很少变化）
RUN apt update -y && apt install -y \
    libxext6 \
    libopencv-dev \
    libgdal-dev && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

# 缓存层2: 复制RKNN运行时文件（版本变化时重新构建）
COPY --from=source /rknn-toolkit2/rknpu2/runtime/Linux/librknn_api/include/* /usr/include/
COPY --from=source /rknn-toolkit2/rknpu2/runtime/Linux/librknn_api/aarch64/librknnrt.so /usr/lib/

# 缓存层3: 复制Python环境（从builder阶段）
COPY --from=builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# 缓存层4: 更新动态链接库（很少变化）
RUN ldconfig

# 缓存层5: 创建用户（很少变化）
RUN groupadd -r coral && useradd -r -g coral coral

WORKDIR /workspace

# 缓存层6: 复制配置文件（偶尔变化）
COPY docker/config /workspace/

# 缓存层7: 设置权限（配置文件变化时重新构建）
RUN chown -R coral:coral /workspace && \
    chmod +x ./entrypoint.sh

# Environment variables
ENV VERSION_CHECK_MODE=continuous \
    PROJECT=coral-platform \
    NUM_WORKERS=1 \
    HOST=0.0.0.0 \
    PORT=9001 \
    WORKFLOWS_STEP_EXECUTION_MODE=local \
    WORKFLOWS_MAX_CONCURRENT_STEPS=4 \
    API_LOGGING_ENABLED=True \
    CORE_MODEL_SAM2_ENABLED=False \
    CORE_MODEL_OWLV2_ENABLED=False \
    ENABLE_STREAM_API=True \
    ENABLE_WORKFLOWS_PROFILING=True \
    ENABLE_PROMETHEUS=True \
    CURRENT_INFERENCE_PLATFORM=rknn

# Switch to non-root user
USER coral

ENTRYPOINT ["./entrypoint.sh"]