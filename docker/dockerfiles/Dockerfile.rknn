# Stage 1: Get RKNN source
FROM ubuntu:22.04 AS source

ARG RKNN_VERSION=2.3.2
ENV RKNN_VERSION=${RKNN_VERSION}

RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
        git \
        ca-certificates \
    && git clone -b v${RKNN_VERSION} https://github.com/airockchip/rknn-toolkit2.git /rknn-toolkit2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Build and install dependencies
FROM ubuntu:22.04 AS builder

ARG DEBIAN_FRONTEND=noninteractive
ARG RKNN_VERSION=1.6.0
ENV RKNN_VERSION=${RKNN_VERSION}

# 安装构建依赖（精简版本）
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
        python3-pip \
        python3-dev \
        git \
        build-essential \
        ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 安装 Poetry
RUN pip install --no-cache-dir -U pip setuptools wheel poetry==1.8.3 \
    && poetry config virtualenvs.create false \
    && poetry config installer.max-workers 10

WORKDIR /tmp

# 复制依赖文件
COPY pyproject.toml poetry.lock ./

# Copy RKNN files from source stage
COPY --from=source /rknn-toolkit2/rknn-toolkit-lite2/packages/rknn_toolkit_lite2-*-cp310-*-linux_aarch64.whl /tmp/

# 安装 Python 依赖（包括 RKNN 组）
RUN poetry install --no-root --only=main \
    && pip install --no-cache-dir /tmp/rknn_toolkit_lite2-*-cp310-*-linux_aarch64.whl \
    && pip cache purge

# 复制源代码并构建
COPY coral_inference /tmp/coral_inference
RUN poetry build

# Stage 3: Runtime
FROM ubuntu:22.04 AS runtime

ARG DEBIAN_FRONTEND=noninteractive
ARG RKNN_VERSION=1.6.0
ENV RKNN_VERSION=${RKNN_VERSION}

# 安装运行时依赖（精简版）
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        libxext6 \
        libopencv-dev \
        libgdal-dev \
        libgomp1 \
        ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy RKNN runtime files
COPY --from=source /rknn-toolkit2/rknpu2/runtime/Linux/librknn_api/include/* /usr/include/
COPY --from=source /rknn-toolkit2/rknpu2/runtime/Linux/librknn_api/aarch64/librknnrt.so /usr/lib/

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages/ /usr/local/lib/python3.10/dist-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# 从构建阶段复制构建的 wheel 包并安装
COPY --from=builder /tmp/dist/*.whl /tmp/
RUN pip install --no-cache-dir /tmp/*.whl \
    && rm -rf /tmp/*.whl \
    && pip cache purge

RUN ldconfig

WORKDIR /app

# 复制配置文件
COPY docker/config/* /app/
RUN chmod +x ./entrypoint.sh

# Environment variables
ENV VERSION_CHECK_MODE=continuous \
    PROJECT=coral-platform \
    NUM_WORKERS=1 \
    HOST=0.0.0.0 \
    PORT=9001 \
    WORKFLOWS_STEP_EXECUTION_MODE=local \
    WORKFLOWS_MAX_CONCURRENT_STEPS=4 \
    API_LOGGING_ENABLED=True \
    CORE_MODEL_SAM2_ENABLED=False \
    CORE_MODEL_OWLV2_ENABLED=False \
    ENABLE_STREAM_API=True \
    ENABLE_WORKFLOWS_PROFILING=True \
    ENABLE_PROMETHEUS=True \
    CURRENT_INFERENCE_PLATFORM=rknn

ENTRYPOINT ["./entrypoint.sh"]