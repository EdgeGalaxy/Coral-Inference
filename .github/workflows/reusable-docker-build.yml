name: Reusable Docker Build

on:
  workflow_call:
    inputs:
      image-type:
        required: true
        type: string
        description: "Type of image to build (cpu/gpu/rknn)"
      dockerfile-path:
        required: true
        type: string
        description: "Path to Dockerfile"
      push-image:
        required: true
        type: boolean
        description: "Whether to push the image"
      platforms:
        required: true
        type: string
        description: "Platforms to build for (e.g. linux/arm64,linux/amd64)"
      custom_tag:
        required: false
        type: string
        description: "Custom tag to use for the image"
        default: ""
      registry:
        required: false
        type: string
        description: "Docker registry to use"
        default: "docker.io"
      custom_registry:
        required: false
        type: string
        description: "Custom registry URL"
        default: ""
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_REGISTRY:
        required: false
      DOCKERHUB_NAMESPACE:
        required: false
      GHCR_TOKEN:
        required: false

env:
  VERSION: "0.0.0" # Default version, will be overwritten

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: Set registry and image name
        id: registry
        run: |
          # Determine registry
          if [[ "${{ inputs.registry }}" == "custom" && -n "${{ inputs.custom_registry }}" ]]; then
            REGISTRY="${{ inputs.custom_registry }}"
          elif [[ "${{ inputs.registry }}" == "ghcr.io" ]]; then
            REGISTRY="ghcr.io"
          elif [[ -n "${{ secrets.DOCKERHUB_REGISTRY }}" ]]; then
            REGISTRY="${{ secrets.DOCKERHUB_REGISTRY }}"
          else
            REGISTRY="docker.io"
          fi
          
          # Determine image name
          if [[ "$REGISTRY" == "ghcr.io" ]]; then
            BASE_IMAGE="ghcr.io/${{ github.repository_owner }}/coral-inference-server-${{ inputs.image-type }}"
          elif [[ "$REGISTRY" == "docker.io" || "$REGISTRY" == "" ]]; then
            BASE_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/coral-inference-server-${{ inputs.image-type }}"
          else
            BASE_IMAGE="$REGISTRY/${{ secrets.DOCKERHUB_NAMESPACE }}/coral-inference-server-${{ inputs.image-type }}"
          fi
          
          echo "REGISTRY=$REGISTRY" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_OUTPUT
          echo "Selected registry: $REGISTRY"
          echo "Base image: $BASE_IMAGE"

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry.outputs.REGISTRY }}
          username: ${{ steps.registry.outputs.REGISTRY == 'ghcr.io' && github.actor || secrets.DOCKERHUB_USERNAME }}
          password: ${{ steps.registry.outputs.REGISTRY == 'ghcr.io' && secrets.GHCR_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Read version from file
        run: |
          VERSION=$(python version.py 2>/dev/null | tail -n1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Detected version: $VERSION"
          echo "Base image will be: ${{ steps.registry.outputs.BASE_IMAGE }}"

      - name: Determine Image Tags
        id: tags
        uses: ./.github/actions/determine-tags
        with:
          custom_tag: ${{ inputs.custom_tag }}
          version: ${{ env.VERSION }}
          base_image: ${{ steps.registry.outputs.BASE_IMAGE }}
          force_push: ${{ inputs.push-image }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest,network=host
          buildkitd-flags: --debug

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ inputs.push-image }}
          tags: ${{ steps.tags.outputs.image_tags }}
          platforms: ${{ inputs.platforms }}
          file: ${{ inputs.dockerfile-path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

