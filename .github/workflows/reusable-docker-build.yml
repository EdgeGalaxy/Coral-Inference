name: Reusable Docker Build

on:
  workflow_call:
    inputs:
      image-type:
        required: true
        type: string
        description: "Type of image to build (cpu/gpu/rknn)"
      dockerfile-path:
        required: true
        type: string
        description: "Path to Dockerfile"
      push-image:
        required: true
        type: boolean
        description: "Whether to push the image"
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tags
        id: tags
        run: |
          if [ "${{ inputs.image-type }}" = "rknn" ]; then
            echo "TAGS=${{ secrets.DOCKERHUB_USERNAME }}/coral-inference-server-${{ inputs.image-type }}:latest-rknn${{env.RKNN_VERSION}}" >> $GITHUB_OUTPUT
            echo "CACHE_FROM=${{ secrets.DOCKERHUB_USERNAME }}/coral-inference-server-${{ inputs.image-type }}:latest-rknn${{env.RKNN_VERSION}}" >> $GITHUB_OUTPUT
          else
            echo "TAGS=${{ secrets.DOCKERHUB_USERNAME }}/coral-inference-server-${{ inputs.image-type }}:latest" >> $GITHUB_OUTPUT
            echo "CACHE_FROM=${{ secrets.DOCKERHUB_USERNAME }}/coral-inference-server-${{ inputs.image-type }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ inputs.push-image }}
          tags: ${{ steps.tags.outputs.TAGS }}
          platforms: linux/arm64
          file: ${{ inputs.dockerfile-path }}
          cache-from: type=registry,ref=${{ steps.tags.outputs.CACHE_FROM }}
          cache-to: type=inline
